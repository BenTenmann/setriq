version: 2.1
orbs:
  codecov: codecov/codecov@3.2.2

executors:
  python-3-7:
    docker:
      - image: circleci/python:3.7
  node-docker:
    docker:
      - image: circleci/node:14.18

jobs:
  generate-version:
    executor: node-docker
    steps:
      - checkout
      - run:
          name: install semantic release dependencies
          command: |
            npm --prefix .semantic-release run installInParent
      - run:
          name: run semantic release
          command: npx semantic-release

  build-and-test:
    executor: python-3-7
    steps:
      - checkout
      - restore_cache:
          keys:
            - python-cache-{{ checksum "requirements.txt" }}
      - run:
          name: install dependencies
          command: |
            python -m pip install -r requirements.txt --user

            # OpenMP setup
            echo "setting up OpenMP"
            sudo apt install libomp-dev && sudo apt show libomp-dev

            export OMP_NUM_THREADS="2"
            python -m pip install . --user
      - save_cache:
          paths:
            - ~/.cache/pip
          key: python-cache-{{ checksum "requirements.txt" }}
          when: always
      - run:
          name: run unit tests
          command: |
            python -m pytest -v tests --cov=${CIRCLE_PROJECT_REPONAME/-/_} --cov-report xml
      - codecov/upload:
          file: coverage.xml

  release:
    executor: python-3-7
    steps:
      - checkout
      - restore_cache:
          keys:
            - python-cache-{{ checksum "requirements.txt" }}
      - run:
          name: install dependencies
          command: |
            pip install twine pybind11
      - run:
          name: create the distribution
          command: |
            python setup.py sdist

            CHECKS=$(twine check dist/* | grep -c "PASSED")
            N_FILES=$(( $(ls -l dist | wc -l) - 1 ))

            if [[ $CHECKS -ne $N_FILES ]]
            then
              echo "twine checks failed"
              exit 1
            fi
#      - run:
#          name: push to pypi
#          command: |
#            twine upload -u ${PYPI_USERNAME} -p ${PYPI_PASSWORD} dist/*

workflows:
  version: 2
  build-release:
    jobs:
      - generate-version:
          filters:
            branches:
              only: "main"
      - build-and-test:
          filters:
            tags:
              only: /.*/
            branches:
              ignore: "main"
      - release:
          requires:
            - build-and-test
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^deploy-.*/
