:py:mod:`setriq.modules.distances`
==================================

.. py:module:: setriq.modules.distances

.. autoapi-nested-parse::

   Python API for sequence distance functions.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   setriq.modules.distances.CdrDist
   setriq.modules.distances.Levenshtein
   setriq.modules.distances.TcrDistComponent
   setriq.modules.distances.TcrDist
   setriq.modules.distances.Hamming
   setriq.modules.distances.Jaro
   setriq.modules.distances.JaroWinkler
   setriq.modules.distances.LongestCommonSubstring
   setriq.modules.distances.OptimalStringAlignment




.. py:class:: CdrDist(substitution_matrix: setriq.modules.substitution.SubstitutionMatrix = BLOSUM45, gap_opening_penalty: float = 10.0, gap_extension_penalty: float = 1.0, return_squareform: bool = False)

   Bases: :py:obj:`Metric`\ [\ :py:obj:`str`\ ]

   The CdrDist [1]_ class. Inherits from Metric.

   .. rubric:: Examples

   >>> sequences = ['CASSLKPNTEAFF', 'CASSAHIANYGYTF', 'CASRGATETQYF']
   >>>
   >>> metric = CdrDist()
   >>> distances = metric(sequences)

   .. rubric:: References

   .. [1] Thakkar, N. and Bailey-Kellogg, C., 2019. Balancing sensitivity and specificity in distinguishing TCR groups
      by CDR sequence similarity. BMC bioinformatics, 20(1), pp.1-14. (https://doi.org/10.1186/s12859-019-2864-8)

   .. py:method:: forward(sequences: Sequence[str]) -> List[float]



.. py:class:: Levenshtein(extra_cost: float = 0.0, return_squareform: bool = False)

   Bases: :py:obj:`Metric`\ [\ :py:obj:`str`\ ]

   The Levenshtein [1]_ class. Inherits from Metric. It uses a refactor of the ``python-Levenshtein`` [2]_
   implementation in the backend.

   .. rubric:: Examples

   >>> sequences = ['CASSLKPNTEAFF', 'CASSAHIANYGYTF', 'CASRGATETQYF']
   >>>
   >>> metric = Levenshtein()
   >>> distances = metric(sequences)

   .. rubric:: References

   .. [1] Levenshtein, V.I., 1966, February. Binary codes capable of correcting deletions, insertions, and reversals.
      In Soviet physics doklady (Vol. 10, No. 8, pp. 707-710).
   .. [2] python-Levenshtein (https://github.com/ztane/python-Levenshtein)

   .. py:method:: forward(sequences: Sequence[str]) -> List[float]



.. py:class:: TcrDistComponent(substitution_matrix: setriq.modules.substitution.SubstitutionMatrix, gap_penalty: float, gap_symbol: str = '-', weight: float = 1.0, return_squareform: bool = False)

   Bases: :py:obj:`Metric`\ [\ :py:obj:`str`\ ]

   The TcrDistComponent class. Inherits from Metric.

   .. rubric:: Examples

   >>> from setriq import BLOSUM62
   >>> sequences = ['CASSLKPNTE', 'CASS-HIANY', 'CASRGAT--Q']
   >>>
   >>> metric = TcrDistComponent(substitution_matrix=BLOSUM62, gap_penalty=4., gap_symbol='-', weight=1.)
   >>> distances = metric(sequences)

   .. py:method:: forward(sequences: Sequence[str]) -> List[float]



.. py:class:: TcrDist(return_squareform: bool = False, **components: TcrDistComponent)

   Bases: :py:obj:`Metric`\ [\ :py:obj:`Dict`\ [\ :py:obj:`str`\ , :py:obj:`str`\ ]\ ]

   TcrDist [1]_ class. Inherits from Metric. It is a container class for individual TcrDistComponent instances.
   Components are executed sequentially and their results aggregated at the end (summation).

   .. attribute:: components

      holds the names of the components to be executed

      :type: List[str]

   .. rubric:: Examples

   >>> sequences = [
   ...     {'cdr_1': 'TSG------FNG', 'cdr_2': 'VVL----DGL', 'cdr_2_5': 'SRSN-GY', 'cdr_3': 'CAVR-----'},
   ...     {'cdr_1': 'TSG------FYG', 'cdr_2': 'NGL----DGL', 'cdr_2_5': 'SRSD-SY', 'cdr_3': 'CA-------'},
   ...     {'cdr_1': 'NSA------FQY', 'cdr_2': 'TYS----SGN', 'cdr_2_5': 'DKSSKY-', 'cdr_3': 'CAMS-----'}
   ... ]
   >>> metric = TcrDist()  # will produce a warning stating default configuration (Dash et al)
   >>> distances = metric(sequences)

   .. rubric:: References

   .. [1] Dash, P., Fiore-Gartland, A.J., Hertz, T., Wang, G.C., Sharma, S., Souquette, A., Crawford, J.C., Clemens,
      E.B., Nguyen, T.H., Kedzierska, K. and La Gruta, N.L., 2017. Quantifiable predictive features define
      epitope-specific T cell receptor repertoires. Nature, 547(7661), pp.89-93. (https://doi.org/10.1038/nature22383)

   .. py:method:: required_input_keys() -> List[str]
      :property:

      Get the keys (=fields) required in the input to TcrDist instance.

      :returns: **required_input_keys** -- returns a list of strings signifying the keys required in the input
      :rtype: List[str]


   .. py:method:: default_definition() -> setriq.modules.utils.TcrDistDef
      :property:

      Get the default TcrDistComponent schema as defined by Dash et al.

      :returns: **default_schema** -- returns the schema for the TcrDistComponent instances held in the default configuration
      :rtype: List[tuple]


   .. py:method:: forward(sequences: Sequence[Dict[str, str]]) -> List[float]



.. py:class:: Hamming(mismatch_score: float = 1.0, return_squareform: bool = False)

   Bases: :py:obj:`Metric`\ [\ :py:obj:`str`\ ]

   Hamming distance class. Inherits from Metric. Sequences must be of equal length.

   .. rubric:: Examples

   >>> metric = Hamming(mismatch_score=2.0)
   >>> sequences = ['CASSLKPNTEAFF', 'CASSAHIANYGYTF', 'CASRGATETQYF']
   >>> distances = metric(sequences)

   .. rubric:: References

   .. [1] https://en.wikipedia.org/wiki/Hamming_distance

   .. py:method:: forward(sequences: Sequence[str]) -> List[float]



.. py:class:: Jaro(jaro_weights: Optional[List[float]] = None, return_squareform: bool = False)

   Bases: :py:obj:`Metric`\ [\ :py:obj:`str`\ ]

   Jaro distance class. Inherits from Metric. Adapted from [2].

   .. rubric:: Examples

   >>> metric = Jaro()
   >>> sequences = ['CASSLKPNTEAFF', 'CASSAHIANYGYTF', 'CASRGATETQYF']
   >>> distances = metric(sequences)

   .. rubric:: References

   [1] Jaro, M.A., 1989. Advances in record-linkage methodology as applied to matching the 1985 census of Tampa,
       Florida. Journal of the American Statistical Association, 84(406), pp.414-420.
   [2] Van der Loo, M.P., 2014. The stringdist package for approximate string matching. R J., 6(1), p.111.

   .. py:method:: forward(sequences: Sequence[str]) -> List[float]



.. py:class:: JaroWinkler(p: float = 0.1, max_l: int = 4, jaro_weights: Optional[List[float]] = None, return_squareform: bool = False)

   Bases: :py:obj:`Jaro`

   Jaro-Winkler distance class. Inherits from Jaro.

   .. rubric:: Examples

   >>> metric = JaroWinkler(p=0.10)
   >>> sequences = ['CASSLKPNTEAFF', 'CASSAHIANYGYTF', 'CASRGATETQYF']
   >>> distances = metric(sequences)

   .. rubric:: References

   .. [1] Winkler, W.E., 1990. String comparator metrics and enhanced decision rules in the Fellegi-Sunter model of
      record linkage.


.. py:class:: LongestCommonSubstring(return_squareform: bool = False)

   Bases: :py:obj:`Metric`\ [\ :py:obj:`str`\ ]

   Longest common substring distance class. Inherits from Metric.

   .. rubric:: Examples

   >>> metric = LongestCommonSubstring()
   >>> sequences = ['CASSLKPNTEAFF', 'CASSAHIANYGYTF', 'CASRGATETQYF']
   >>> distances = metric(sequences)

   .. rubric:: References

   .. [1] https://en.wikipedia.org/wiki/Longest_common_substring_problem

   .. py:method:: forward(sequences: Sequence[str]) -> List[float]



.. py:class:: OptimalStringAlignment(return_squareform: bool = False)

   Bases: :py:obj:`Metric`\ [\ :py:obj:`str`\ ]

   Optimal string alignment distance class. Inherits from Metric.

   .. rubric:: Examples

   >>> metric = OptimalStringAlignment()
   >>> sequences = ['CASSLKPNTEAFF', 'CASSAHIANYGYTF', 'CASRGATETQYF']
   >>> distances = metric(sequences)

   .. rubric:: References

   .. [1] https://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance

   .. py:method:: forward(sequences: Sequence[str]) -> List[float]



